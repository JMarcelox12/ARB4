datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Aqui, você define a URL do banco no .env
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @id @default(autoincrement()) // Usando Int para chave primária
  image             String?
  name              String
  age               Int
  email             String    @unique
  password          String
  saldo             Float?    @default(0)
  resetToken        String?
  resetTokenExpires DateTime?

  bets         Bet[]
  transactions Transaction[]
}

model Bet {
  id           Int       @id @default(autoincrement()) // Usando Int para chave primária
  userId       Int
  antId        Int
  roomId       Int
  amount       Float
  potentialWin Float
  odd          Float
  type         BetType   @default(CAMPEA)
  status       BetStatus @default(PENDING)
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
  ant  Ant  @relation(fields: [antId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
}

enum BetType {
  CAMPEA // Aposta na campeã (1º lugar)
  VICE // Aposta na vice (2º lugar)
  PENULTIMA // Aposta na penúltima (posição específica)
  ULTIMA // Aposta na última colocada
}

enum BetStatus {
  PENDING // Aposta em andamento (corrida não finalizada)
  WON // Aposta ganha
  LOST // Aposta perdida
  CANCELED // Aposta cancelada
}

model Ant {
  id    Int     @id @default(autoincrement()) // Usando Int para chave primária
  image String?
  name  String  @unique
  win   Int
  game  Int
  odd   Float

  rooms RoomAnt[]
  bets  Bet[]
}

model Room {
  id          Int        @id @default(autoincrement()) // Usando Int para chave primária
  image       String
  name        String     @unique
  description String
  status      RoomStatus @default(PAUSE)
  inicioFase  DateTime
  winnerId    Int?

  rooms RoomAnt[]
  Bet   Bet[]
}

enum RoomStatus {
  PAUSE // Sala em preparo / 30s
  BETTING // Sala em apostas / 1m
  RACING // Sala em disputa / 15s
  FINISH // Sala finalizada
}

model RoomAnt {
  id     Int @id @default(autoincrement()) // Usando Int para chave primária
  roomId Int
  antId  Int

  room Room @relation(fields: [roomId], references: [id])
  ant  Ant  @relation(fields: [antId], references: [id])
}

model Transaction {
  id        Int             @id @default(autoincrement()) // Usando Int para chave primária
  userId    Int
  amount    Float
  type      TypeTransaction @default(DEPOSIT)
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum TypeTransaction {
  DEPOSIT
  WITHDRAW
}
